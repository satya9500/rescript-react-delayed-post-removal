// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Post from "./post.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Nanoid from "nanoid";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";

function s(prim) {
  return prim;
}

function reducer(state, action) {
  switch (action.TAG | 0) {
    case /* DeleteLater */0 :
        return {
                posts: state.posts,
                forDeletion: Belt_MapString.set(state.forDeletion, action._0.id, action._1)
              };
    case /* DeleteAbort */1 :
        return {
                posts: state.posts.concat([action._0]),
                forDeletion: state.forDeletion
              };
    case /* DeleteNow */2 :
        var post = action._0;
        return {
                posts: state.posts.filter(function (arrPosts) {
                      return post.id !== arrPosts.id;
                    }),
                forDeletion: state.forDeletion
              };
    
  }
}

var initialState = {
  posts: Post.examples,
  forDeletion: undefined
};

function PostFeed$PostItem(Props) {
  var post = Props.post;
  var dispatch = Props.dispatch;
  var $$clearTimeout = Props.clearTimeout;
  var match = React.useState(function () {
        return false;
      });
  var setHidePost = match[1];
  var setDeletion = function (param) {
    var timeoutId = window.setTimeout((function (param) {
            return Curry._1(dispatch, {
                        TAG: /* DeleteNow */2,
                        _0: post
                      });
          }), 10000);
    console.log(timeoutId);
    Curry._1(dispatch, {
          TAG: /* DeleteLater */0,
          _0: post,
          _1: timeoutId
        });
    return Curry._1(setHidePost, (function (param) {
                  return true;
                }));
  };
  var abortDeletion = function (param) {
    Curry._1($$clearTimeout, post);
    return Curry._1(setHidePost, (function (param) {
                  return false;
                }));
  };
  var deleteImmediate = function (param) {
    Curry._1($$clearTimeout, post);
    return Curry._1(dispatch, {
                TAG: /* DeleteNow */2,
                _0: post
              });
  };
  if (match[0]) {
    return React.createElement("div", {
                className: "relative bg-yellow-100 px-8 py-4 mb-4 h-40"
              }, React.createElement("p", {
                    className: "text-center white mb-1"
                  }, "This post from " + post.title + " by " + post.author + " will be permanently removed in 10 seconds."), React.createElement("div", {
                    className: "flex justify-center"
                  }, React.createElement("button", {
                        className: "mr-4 mt-4 bg-yellow-500 hover:bg-yellow-900 text-white py-2 px-4",
                        onClick: abortDeletion
                      }, "Restore"), React.createElement("button", {
                        className: "mr-4 mt-4 bg-red-500 hover:bg-red-900 text-white py-2 px-4",
                        onClick: deleteImmediate
                      }, "Delete Immediately")), React.createElement("div", {
                    className: "bg-red-500 h-2 w-full absolute top-0 left-0 progress"
                  }));
  } else {
    return React.createElement("div", {
                className: "bg-green-700 hover:bg-green-900 text-gray-300 hover:text-gray-100 px-8 py-4 mb-4"
              }, React.createElement("h2", {
                    className: "text-2xl mb-1"
                  }, post.title), React.createElement("h3", {
                    className: "mb-4"
                  }, post.author), Belt_Array.map(post.text, (function (para) {
                      return React.createElement("p", {
                                  key: Nanoid.nanoid(),
                                  className: "mb-1 text-sm"
                                }, para);
                    })), React.createElement("button", {
                    className: "mr-4 mt-4 bg-red-500 hover:bg-red-900 text-white py-2 px-4",
                    onClick: setDeletion
                  }, "Remove this post"));
  }
}

var PostItem = {
  make: PostFeed$PostItem
};

function PostFeed(Props) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var $$clearTimeout = function (post) {
    Belt_Option.map(Belt_MapString.get(state.forDeletion, post.id), window.clearTimeout);
    
  };
  var posts = Belt_Array.map(state.posts, (function (x) {
          return React.createElement(PostFeed$PostItem, {
                      post: x,
                      dispatch: dispatch,
                      clearTimeout: $$clearTimeout,
                      key: x.id
                    });
        }));
  return React.createElement("div", {
              className: "max-w-3xl mx-auto mt-8 relative"
            }, React.createElement("div", undefined, posts));
}

var make = PostFeed;

export {
  s ,
  reducer ,
  initialState ,
  PostItem ,
  make ,
  
}
/* Post Not a pure module */
